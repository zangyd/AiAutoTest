name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # 每天凌晨2点运行
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'
  MYSQL_DATABASE: autotest
  CACHE_KEY_PREFIX: v1

jobs:
  code-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 设置Node.js环境
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install flake8 mypy black isort bandit safety
        pip install -r backend/requirements.txt
        cd frontend && npm ci
    
    - name: 后端代码检查
      run: |
        black --check backend/
        isort --check-only backend/
        mypy backend/
        flake8 backend/ --max-line-length=100 --extend-ignore=E203
        bandit -r backend/ -ll
        safety check -r backend/requirements.txt
    
    - name: 前端代码检查
      run: |
        cd frontend
        npm run lint
        npm run type-check
        npm run format:check
        npm audit

  test:
    needs: code-check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGODB_USER }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
        ports:
          - 27017:27017
      
      redis:
        image: redis:6.2
        env:
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 设置Node.js环境
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements/dev.txt
        cd frontend && npm ci
    
    - name: 运行测试
      env:
        MYSQL_HOST: localhost
        MYSQL_PORT: 3306
        MYSQL_USER: root
        MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
        MONGODB_URI: mongodb://${{ secrets.MONGODB_USER }}:${{ secrets.MONGODB_PASSWORD }}@localhost:27017
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      run: |
        if [ "${{ matrix.test-type }}" == "unit" ]; then
          cd backend && pytest tests/unit -v --junitxml=test-results/unit-test.xml
          cd ../frontend && npm run test:unit -- --coverage
        elif [ "${{ matrix.test-type }}" == "integration" ]; then
          cd backend && pytest tests/integration -v --junitxml=test-results/integration-test.xml
        else
          cd frontend
          npm run build
          cd ../backend
          python main.py &
          sleep 10
          cd ../frontend
          npx playwright install --with-deps
          npm run test:e2e
        fi
    
    - name: 上传测试结果
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ${{ matrix.test-type }}-test-results
        path: |
          backend/test-results/*.xml
          frontend/coverage
          frontend/test-results

  build:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: 登录Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: 构建并推送镜像
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/autotest:${{ github.sha }}
          ${{ secrets.DOCKERHUB_USERNAME }}/autotest:latest
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/autotest:latest
        cache-to: type=inline

  notify:
    needs: [code-check, test, build]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: 发送通知
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: ${{ job.status }}
        SLACK_TITLE: 'CI Pipeline 状态'
        SLACK_MESSAGE: |
          分支: ${{ github.ref }}
          提交: ${{ github.sha }}
          状态: ${{ job.status }}
          详情: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} 