name: Automated Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # 每天凌晨2点运行
  workflow_dispatch:  # 支持手动触发

jobs:
  unit-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: Autotest@2024
          MYSQL_DATABASE: autotest
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: Autotest@2024
        ports:
          - 27017:27017
      
      redis:
        image: redis:6.2
        env:
          REDIS_PASSWORD: Autotest@2024
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements/dev.txt
        
    - name: Run backend unit tests
      run: |
        cd backend
        pytest tests/unit -v --junitxml=test-results/unit-test.xml
      env:
        MYSQL_HOST: localhost
        MYSQL_PORT: 3306
        MYSQL_USER: root
        MYSQL_PASSWORD: Autotest@2024
        MYSQL_DATABASE: autotest
        MONGODB_URI: mongodb://admin:Autotest@2024@localhost:27017
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: Autotest@2024
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
        
    - name: Run frontend unit tests
      run: |
        cd frontend
        npm run test:unit -- --coverage
        
    - name: Upload unit test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          backend/test-results/unit-test.xml
          frontend/coverage

  integration-test:
    needs: unit-test
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: Autotest@2024
          MYSQL_DATABASE: autotest
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: Autotest@2024
        ports:
          - 27017:27017
      
      redis:
        image: redis:6.2
        env:
          REDIS_PASSWORD: Autotest@2024
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements/dev.txt
        
    - name: Run integration tests
      run: |
        cd backend
        pytest tests/integration -v --junitxml=test-results/integration-test.xml
      env:
        MYSQL_HOST: localhost
        MYSQL_PORT: 3306
        MYSQL_USER: root
        MYSQL_PASSWORD: Autotest@2024
        MYSQL_DATABASE: autotest
        MONGODB_URI: mongodb://admin:Autotest@2024@localhost:27017
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: Autotest@2024
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: backend/test-results/integration-test.xml

  e2e-test:
    needs: integration-test
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: Autotest@2024
          MYSQL_DATABASE: autotest
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: Autotest@2024
        ports:
          - 27017:27017
      
      redis:
        image: redis:6.2
        env:
          REDIS_PASSWORD: Autotest@2024
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements/dev.txt
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Start backend server
      run: |
        cd backend
        python main.py &
        sleep 10
      env:
        MYSQL_HOST: localhost
        MYSQL_PORT: 3306
        MYSQL_USER: root
        MYSQL_PASSWORD: Autotest@2024
        MYSQL_DATABASE: autotest
        MONGODB_URI: mongodb://admin:Autotest@2024@localhost:27017
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: Autotest@2024
        
    - name: Install Playwright
      run: |
        cd frontend
        npx playwright install --with-deps
        
    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: frontend/test-results

  test-report:
    needs: [unit-test, integration-test, e2e-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all test results
      uses: actions/download-artifact@v3
      
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: "**/*.xml"
        reporter: java-junit
        fail-on-error: true 