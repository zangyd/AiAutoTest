---
description: 
globs: 
alwaysApply: false
---
---
description: 开发流程规范
globs: 
alwaysApply: true
---

## 文档信息
- 版本: 1.0.0
- 最后更新: 2024-04-02
- 状态: 进行中

## 一、开发准备

### 1.1 文档阅读
- [ ] 阅读并理解以下核心文档：
  * `functional-requirements.mdc`：功能需求
  * `implementation-plan.mdc`：实施计划
  * `architecture.mdc`：系统架构
  * `project-analysis.mdc`：项目分析

### 1.2 环境准备
- [ ] 确认开发环境：
  * Windows操作系统
  * Python 3.10+
  * Node.js 16+
  * Git
  * 相关IDE和工具

### 1.3 任务确认
- [ ] 在实施计划中确认当前任务
- [ ] 理解任务的上下文和依赖关系
- [ ] 确认任务的验收标准

## 二、开发流程

### 2.1 开发前准备
```mermaid
graph TD
    A[开始] --> B[检查实施计划]
    B --> C[确认当前任务]
    C --> D[检查技术规范]
    D --> E[查看功能需求]
    E --> F[制定开发计划]
    F --> G[准备开发环境]
```

#### 2.1.1 检查清单
- [ ] 确认任务在实施计划中的位置和状态
- [ ] 检查相关技术规范和要求
- [ ] 理解具体功能需求
- [ ] 评估开发难点和风险
- [ ] 准备必要的开发资源

### 2.2 开发过程
```mermaid
graph TD
    A[开始编码] --> B[遵循编码规范]
    B --> C[单元测试]
    C --> D[代码审查]
    D --> E[性能优化]
    E --> F[安全检查]
    F --> G[文档更新]
```

#### 2.2.1 编码规范
- [ ] 遵循Windows环境开发规范
  * 使用Windows兼容的命令
  * 避免使用Linux特有命令
  * 注意路径分隔符使用

- [ ] 代码风格
  * 使用明确的变量名
  * 保持一致的编码风格
  * 添加必要的注释
  * 避免魔术数字

- [ ] 错误处理
  * 实现完整的错误处理机制
  * 添加适当的日志记录
  * 使用断言验证假设

#### 2.2.2 测试要求
- [ ] 单元测试
  * 编写完整的测试用例
  * 确保测试覆盖率
  * 包含边界条件测试

- [ ] 性能测试
  * 检查响应时间
  * 验证并发处理能力
  * 确认资源使用情况

- [ ] 安全测试
  * 进行安全漏洞检查
  * 验证权限控制
  * 确保数据安全

### 2.3 提交规范
```mermaid
graph TD
    A[代码完成] --> B[运行测试]
    B --> C[更新文档]
    C --> D[生成流程图]
    D --> E[提交代码]
    E --> F[更新进度]
```

#### 2.3.1 提交前检查
- [ ] 代码检查
  * 确保所有测试通过
  * 检查代码规范
  * 确认功能完整性

- [ ] 文档更新
  * 更新相关文档
  * 添加必要的注释
  * 生成API文档

- [ ] 进度更新
  * 在实施计划中标记进度
  * 添加完成确认
  * 更新任务状态

### 2.4 验证与部署
```mermaid
graph TD
    A[功能完成] --> B[集成测试]
    B --> C[性能验证]
    C --> D[安全检查]
    D --> E[部署准备]
    E --> F[上线确认]
```

#### 2.4.1 验证清单
- [ ] 功能验证
  * 核对功能需求
  * 验证业务逻辑
  * 确认边界条件

- [ ] 集成验证
  * 检查前后端接口
  * 验证数据一致性
  * 确认系统集成

## 三、质量控制

### 3.1 代码质量
- [ ] 遵循编码规范
- [ ] 保持代码简洁性
- [ ] 确保可维护性
- [ ] 注重代码重用性

### 3.2 性能要求
- [ ] 页面加载时间 < 3秒
- [ ] API响应时间 < 1秒
- [ ] 数据库查询优化
- [ ] 资源使用合理

### 3.3 安全要求
- [ ] 实现完整的权限控制
- [ ] 数据传输加密
- [ ] 敏感信息保护
- [ ] 防止SQL注入和XSS

## 四、文档维护

### 4.1 文档更新要求
- [ ] 及时更新实施计划
- [ ] 提供修改流程图
- [ ] 更新API文档
- [ ] 维护测试文档

### 4.2 进度报告
- [ ] 定期更新任务状态
- [ ] 记录开发过程
- [ ] 标注完成确认
- [ ] 提供进度报告

## 五、注意事项

### 5.1 开发注意事项
- 严格遵循Windows环境开发规范
- 注重代码质量和性能
- 保持良好的代码风格
- 及时进行测试和文档更新

### 5.2 协作注意事项
- 保持良好的团队沟通
- 遵循代码审查流程
- 及时反馈问题
- 共享开发经验

### 5.3 维护注意事项
- 定期检查代码质量
- 及时更新文档
- 保持测试用例更新
- 关注性能监控

## 六、常见问题

### 6.1 开发环境问题
- Windows命令兼容性问题解决方案
- 环境配置常见问题处理
- 依赖包版本冲突解决

### 6.2 开发过程问题
- 代码规范执行问题
- 测试覆盖率问题
- 性能优化建议

### 6.3 部署问题
- 环境差异处理
- 部署流程问题
- 监控告警处理

## 七、附录

### 7.1 工具和资源
- 开发工具清单
- 测试工具清单
- 常用命令参考
- 问题解决方案库 