---
description: 
globs: 
alwaysApply: true
---
---
description: 后端目录结构使用指南，后端目录规范
globs: 
alwaysApply: true
---

# 后端目录结构使用指南

## 1. 总体结构

```
backend/src/
├── core/                  # 核心功能模块
│   ├── auth/              # 认证相关核心功能
│   ├── cache/             # 缓存相关核心功能
│   ├── config/            # 配置管理
│   ├── database/          # 数据库连接管理
│   ├── logging/           # 日志处理
│   └── utils/             # 工具函数
├── api/                   # API接口层
│   ├── v1/                # API版本1
│   │   ├── auth/          # 认证相关API
│   │   ├── projects/      # 项目相关API
│   │   ├── reports/       # 报告相关API
│   │   └── tests/         # 测试相关API
│   ├── core/              # API核心组件
│   ├── models/            # API数据模型
│   ├── services/          # API服务层
│   └── config/            # API配置
├── tests/                 # 独立测试目录
│   ├── api/               # API测试
│   │   └── v1/            # API v1版本测试
│   ├── core/              # 核心模块测试
│   ├── utils/             # 测试工具函数
│   ├── conftest.py        # 测试配置
│   └── run_tests.py       # 测试运行脚本
├── scripts/               # 辅助脚本
│   └── db/                # 数据库相关脚本
├── migrations/            # 数据库迁移
│   └── versions/          # 迁移版本
└── main.py                # 应用入口
```

## 2. 模块开发规范

### 2.1 核心模块 (core/)
- 位置：`backend/src/core/`
- 用途：实现基础功能，供API层调用
- 主要组件：
  - auth: 认证和授权相关功能
  - cache: 缓存管理功能
  - config: 配置管理
  - database: 数据库连接和会话管理
  - logging: 日志记录功能
  - utils: 通用工具函数
- 开发要求：
  ```python
  # 示例：core/auth/jwt.py
  class JWTHandler:
      """JWT处理器，提供Token的生成和验证功能"""
      @staticmethod
      async def create_access_token(): ...
      @staticmethod
      async def verify_token(): ...
  ```

### 2.2 API模块 (api/)
- 位置：`backend/src/api/`
- 主要组件：
  - v1: API版本1的所有接口
  - core: API核心组件
  - models: API数据模型
  - services: API服务层
  - config: API特定配置
- 结构示例：
  ```
  api/v1/module_name/
  ├── __init__.py         # 模块初始化
  ├── router.py           # 路由定义
  ├── schemas.py          # 数据模型
  ├── dependencies.py     # 依赖项
  ```
- 开发规范：
  1. 路由文件 (router.py):
     ```python
     router = APIRouter()
     
     @router.post("/endpoint")
     async def handler(): ...
     ```
  2. 模型文件 (schemas.py):
     ```python
     class RequestModel(BaseModel): ...
     class ResponseModel(BaseModel): ...
     ```
  3. 依赖文件 (dependencies.py):
     ```python
     async def get_current_user(): ...
     ```

### 2.3 测试规范 (tests/)
- 位置：`backend/src/tests/`
- 结构：
  ```
  tests/
  ├── api/                # API测试
  │   └── v1/             # API v1版本测试
  │       └── module_name/# 具体模块测试
  ├── core/               # 核心模块测试
  │   └── module_name/    # 具体模块测试
  ├── utils/              # 测试工具函数
  ├── conftest.py         # 测试配置和fixture
  └── run_tests.py        # 测试运行脚本
  ```
- 测试编写规范：
  ```python
  @pytest.mark.asyncio
  class TestFeature:
      """功能测试类"""
      async def test_success_case(self): ...
      async def test_error_case(self): ...
  ```

### 2.4 脚本和迁移 (scripts/ 和 migrations/)
- 脚本目录 (`backend/src/scripts/`): 用于存放各种辅助脚本
- 迁移目录 (`backend/src/migrations/`): 用于管理数据库迁移
- 开发规范：
  - 脚本应该有明确的功能和文档
  - 迁移文件应该遵循Alembic的规范

## 3. 开发流程

### 3.1 新增功能
1. 在core层实现基础功能
2. 在api层创建对应模块目录
3. 实现router、schemas、dependencies
4. 在tests目录下创建对应的测试目录和文件

### 3.2 测试开发
1. 在tests目录下创建与源码结构对应的测试目录
2. 编写必要的fixture在conftest.py中
3. 实现测试类和测试方法
4. 使用run_tests.py来运行测试

## 4. 使用示例

### 4.1 创建新API模块
```bash
# 1. 创建目录结构
mkdir -p backend/src/api/v1/new_module
mkdir -p backend/src/tests/api/v1/new_module

# 2. 创建必要文件
touch backend/src/api/v1/new_module/{__init__.py,router.py,schemas.py,dependencies.py}
touch backend/src/tests/api/v1/new_module/{__init__.py,test_router.py,conftest.py}
```

### 4.2 编写测试
```python
# backend/src/tests/api/v1/new_module/test_router.py
@pytest.mark.asyncio
class TestFeature:
    async def test_success(self, client, test_data):
        response = await client.post("/api/v1/endpoint", json=test_data)
        assert response.status_code == 200
```

### 4.3 运行测试
```bash
# 运行特定模块的测试
python backend/src/tests/run_tests.py src/tests/api/v1/new_module

# 运行所有测试
python backend/src/tests/run_tests.py
```

## 5. 注意事项

### 5.1 目录组织
- 保持目录结构一致性
- 遵循模块化原则
- 测试目录结构应与源码目录结构对应

### 5.2 测试编写
- 每个API端点都需要测试
- 包含成功和失败场景
- 使用fixture管理测试数据
- 保持测试独立性
- 可以使用独立测试脚本解决复杂依赖问题

### 5.3 代码规范
- 使用类型注解
- 编写详细的文档字符串
- 遵循PEP 8规范
- 保持代码整洁

## 6. 常见问题

### 6.1 测试数据管理
- 使用fixture创建和清理测试数据
- 避免测试间数据互相影响
- 使用事务回滚保持数据库清洁

### 6.2 异步测试
- 使用pytest.mark.asyncio标记
- 正确处理异步资源的清理
- 注意异步上下文管理

### 6.3 依赖注入
- 合理使用FastAPI的依赖注入
- 在测试中正确mock依赖
- 保持依赖的可测试性

### 6.4 循环导入问题
- 合理组织模块结构，避免循环导入
- 对于难以解决的循环导入，可以使用独立测试脚本进行测试
- 使用惰性导入（延迟导入）解决复杂依赖关系

## 7. 最佳实践

1. 模块化设计
   - 功能独立
   - 职责单一
   - 接口清晰

2. 测试驱动开发
   - 先写测试
   - 再实现功能
   - 持续重构

3. 独立测试策略
   - 针对复杂模块编写独立测试脚本
   - 使用模拟对象替代复杂依赖
   - 提供多种测试方法覆盖不同场景

4. 文档维护
   - 及时更新文档
   - 示例代码
   - 清晰的注释

5. 代码质量
   - 代码审查
   - 持续集成
   - 测试覆盖率
```