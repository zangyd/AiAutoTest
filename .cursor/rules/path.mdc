---
description: 目录结构
globs: 
alwaysApply: true
---

```mermaid
graph TD
    %% 根目录结构
    Root[项目根目录] --> Core[核心目录]
    Root --> Docs[文档]
    Root --> DevOps[DevOps相关]
    Root --> Config[配置文件]

    %% 核心目录
    Core --> Backend[backend/]
    Core --> Frontend[frontend/]
    Core --> Monitor[monitor/]

    %% 后端结构
    Backend --> BE_Structure[目录结构]
    Backend --> BE_Config[配置文件]
    
    BE_Structure --> BE_Src[src/]
    BE_Structure --> BE_Tests[tests/]
    BE_Structure --> BE_Scripts[scripts/]
    BE_Structure --> BE_Logs[logs/]
    
    BE_Config --> |"pytest.ini\n.env\n.env.example\nrequirements.txt"| BE_ConfigFiles
    
    BE_Src --> BE_Core[core/]
    BE_Core --> BE_Auth[auth/]
    BE_Core --> BE_Config[config/]

    %% 前端结构
    Frontend --> FE_Structure[目录结构]
    Frontend --> FE_Config[配置文件]
    
    FE_Structure --> FE_Src[src/]
    FE_Structure --> FE_Tests[tests/]
    FE_Structure --> FE_Public[public/]
    
    FE_Config --> |"vite.config.ts\ntsconfig.json\n.eslintrc.js"| FE_ConfigFiles
    
    FE_Src --> |"App.vue\nmain.ts"| FE_MainFiles
    FE_Src --> FE_Components[components/]
    FE_Src --> FE_Views[views/]
    FE_Src --> FE_Utils[utils/]
    FE_Src --> FE_Router[router/]
    FE_Src --> FE_Store[store/]

    %% 监控系统
    Monitor --> Prometheus[prometheus/]
    Monitor --> Grafana[grafana/]
    Monitor --> Logstash[logstash/]
    
    Prometheus --> |"prometheus.yml"| Prom_Config
    Prometheus --> Prom_Rules[rules/]
    
    Grafana --> |"grafana.ini"| Grafana_Config
    Grafana --> Grafana_Dashboards[dashboards/]
    
    Logstash --> |"logstash.yml"| Logstash_Config
    Logstash --> Logstash_Pipeline[pipeline/]

    %% DevOps相关
    DevOps --> Docker[docker/]
    DevOps --> Scripts[scripts/]
    DevOps --> Jenkins[jenkins/]
    
    Docker --> |"docker-compose.yml\ndocker-compose-monitor.yml"| Docker_Files
    Scripts --> |"*.sh\n*.py\n*.ps1"| Script_Files
    Jenkins --> |"Jenkinsfile\nconfig.xml"| Jenkins_Files

    %% 文档
    Docs --> Community[community/]
    Docs --> API[api/]
    Docs --> Design[design/]
    
    Community --> |"CODE_OF_CONDUCT.md\nCONTRIBUTING.md\nSECURITY.md\nSUPPORT.md"| Community_Docs
    API --> |"openapi.yaml\nswagger.json"| API_Docs
    Design --> |"architecture.md\ndata-model.md"| Design_Docs

    %% 配置文件
    Config --> |"README.md\n.gitignore\n.gitattributes\n.gitmessage"| Root_Config
```

目录结构说明：

1. 核心目录
   - backend/：后端服务
     ```
     backend/
     ├── src/                # 源代码
     │   └── core/          # 核心功能
     │       ├── auth/      # 认证相关
     │       └── config/    # 配置管理
     ├── tests/             # 测试用例
     ├── scripts/           # 维护脚本
     └── logs/             # 日志文件
     ```

   - frontend/：前端应用
     ```
     frontend/
     ├── src/              # 源代码
     │   ├── components/   # 组件
     │   ├── views/        # 页面
     │   ├── utils/        # 工具
     │   ├── router/       # 路由
     │   └── store/        # 状态管理
     ├── tests/            # 测试用例
     └── public/           # 静态资源
     ```

   - monitor/：监控系统
     ```
     monitor/
     ├── prometheus/       # Prometheus配置
     │   └── rules/       # 告警规则
     ├── grafana/         # Grafana配置
     │   └── dashboards/  # 仪表盘
     └── logstash/        # 日志收集
         └── pipeline/    # 处理管道
     ```

2. DevOps相关
   - docker/：容器配置
   - scripts/：运维脚本
   - jenkins/：CI/CD配置

3. 文档
   - community/：社区文档
   - api/：API文档
   - design/：设计文档

4. 配置文件
   - Git相关配置
   - IDE配置
   - 环境配置

目录命名规范：
1. 使用小写字母
2. 使用连字符(-)分隔单词
3. 保持简短但具描述性
4. 遵循行业通用命名

文件命名规范：
1. 配置文件：小写，可包含点号
2. 源代码文件：
   - 后端：snake_case
   - 前端：PascalCase (Vue组件)
3. 测试文件：test_前缀
4. 文档文件：大写字母开头

这个结构遵循以下原则：
1. 关注点分离
2. 模块化组织
3. 清晰的层次结构
4. 符合各框架最佳实践
5. 便于维护和扩展
