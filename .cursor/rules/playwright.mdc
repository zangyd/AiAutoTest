---
description: Playwright最佳实践与编码规范
globs: 
alwaysApply: false
---

---
description:Playwright 测试的最佳实践和编码规范，涵盖稳定选择器、测试隔离、用户中心测试和性能考量等内容。
globs:"**/*.spec.ts  "
alwaysApply:true
--- 

### **一、一般原则**  
- **测试用户可见行为**：聚焦用户与应用的交互方式，而非内部实现细节。  
- **隔离测试用例**：确保测试相互独立，避免级联失败并保证结果可预测。  
- **避免测试第三方依赖**：通过模拟或存根外部服务和 API，隔离应用自身行为。  


### **二、代码组织与结构**  
- **目录结构**：  
  - `tests/`：存放所有测试文件。  
  - `tests/e2e/`：端到端（E2E）测试。  
  - `tests/unit/`：单元测试（如有，Playwright 主要用于 E2E 测试）。  
  - `tests/utils/`：辅助函数和页面对象模型（POM）。  
- **文件命名规范**：  
  - 测试文件使用 `.spec.ts` 或 `.spec.js` 后缀（如 `login.spec.ts`）。  
  - 相关测试归组到同一文件中。  
- **模块组织**：  
  - 采用页面对象模型（POM）封装 UI 元素和交互逻辑。  
- **组件架构**：  
  - 围绕应用的组件或功能模块组织测试。  
- **代码拆分策略**：  
  - 测试文件无需特殊拆分，但需保持简洁聚焦。  


### **三、常见模式与反模式**  
- **设计模式**：  
  - **页面对象模型（POM）**：将每个页面抽象为一个类，包含页面元素的交互方法，提升复用性和可维护性。示例：  
    ```typescript  
    class LoginPage {  
      constructor(private readonly page: Page) {}  

      async goto() {  
        await this.page.goto('/login');  
      }  

      async login(username: string, password: string) {  
        await this.page.fill('#username', username);  
        await this.page.fill('#password', password);  
        await this.page.click('#login-button');  
      }  

      async getErrorMessage() {  
        return await this.page.textContent('#error-message');  
      }  
    }  
    ```  
  - **夹具模式（Fixture）**：利用 Playwright 内置夹具管理测试的初始化和清理，确保每个测试从干净状态开始。  
- **推荐实践**：  
  - 在 `playwright.config.ts` 中使用 `baseURL`，避免硬编码 URL。  
  - 使用 `expect` 匹配器进行断言（如 `expect(page.locator('#success')).toBeVisible()`）。  
  - 利用自动等待功能提升稳定性。  
- **反模式**：  
  - 硬编码 URL。  
  - 使用脆弱选择器（如基于 DOM 结构的 XPath）。  
  - 编写相互依赖的测试用例。  
- **状态管理**：  
  - 保持测试无状态，每次测试前重置应用状态。  
  - 通过数据库事务或 API 调用为测试预置数据。  
- **错误处理**：  
  - 使用 `try...catch` 处理预期错误。  
  - 记录带有描述信息的错误和失败。  
  - 对非关键断言使用 `expect.soft()`，避免测试立即失败。  


### **四、性能考量**  
- **优化技巧**：  
  - 并行运行测试以减少整体执行时间。  
  - 开发时在 `playwright.config.ts` 中使用 `reuseExistingServer: true` 加速调试。  
  - 使用 `codegen` 自动生成选择器。  
- **内存管理**：  
  - 测试后关闭页面和浏览器实例以释放资源。  
- **渲染优化**：  
  - 非直接相关，但需优化应用渲染以加快测试速度。  
- **包大小优化**：  
  - 非直接相关，但需优化应用包大小以加快加载。  
- **懒加载策略**：  
  - 测试中无直接关联。  


### **五、安全最佳实践**  
- **常见漏洞**：  
  - 避免在测试代码或日志中暴露敏感数据（如密码、API 密钥）。  
- **输入验证**：  
  - 测试输入验证逻辑，确保应用正确处理无效数据。  
- **认证与授权**：  
  - 测试不同用户角色和权限。  
- **数据保护**：  
  - 确保数据库中敏感数据已加密。  
- **安全 API 通信**：  
  - 测试 API 调用是否通过 HTTPS 发起。  


### **六、测试方法**  
- **单元测试**：  
  - Playwright 以 E2E 测试为主，但可对工具函数或组件编写单元测试。  
- **集成测试**：  
  - 测试应用不同模块间的交互。  
- **端到端测试**：  
  - 模拟用户流程，测试整个应用。  
- **测试组织**：  
  - 按功能或特性分组测试用例。  
  - 使用 `describe` 块组织测试结构。  
- **模拟与存根**：  
  - 使用 Playwright 的 `route` API 模拟 API 响应。  
  - 使用 `locator.evaluate` 存根 JavaScript 函数。  


### **七、常见陷阱与注意事项**  
- **高频错误**：  
  - 使用 XPath 而非 CSS 选择器。  
  - 未使用自动等待功能。  
  - 编写不稳定的测试用例。  
- **边缘场景**：  
  - 处理不同屏幕尺寸和设备。  
  - 测试错误条件和极端场景。  
- **版本特定问题**：  
  - 关注 Playwright 版本更新日志和升级指南。  
- **兼容性问题**：  
  - 在不同浏览器和操作系统上测试。  
- **调试策略**：  
  - 使用 Playwright Inspector 可视化调试测试。  
  - 通过 `console.log` 输出测试执行信息。  
  - 使用 `pause()` 暂停测试以检查页面状态。  


### **八、工具与环境**  
- **推荐开发工具**：  
  - 安装 Playwright 扩展的 VS Code。  
- **构建配置**：  
  - 使用 TypeScript 提升类型安全和自动补全。  
- **代码检查与格式化**：  
  - 使用 ESLint 和 Prettier 统一代码风格。  
- **部署最佳实践**：  
  - 在生产部署前，于 CI/CD 管道中运行测试。  
- **CI/CD 集成**：  
  - 将 Playwright 集成到 GitHub Actions、Jenkins 或 GitLab CI 等工具中。  


### **九、具体最佳实践与细节**  
- **稳定选择器**：优先使用基于 `data-testid` 或 `data-test-id` 等属性的 CSS 选择器，而非 XPath 或易变的类名。  
- **利用自动等待**：Playwright 会自动等待元素可操作后再执行动作，避免不必要的显式等待。必要时使用显式等待（如 `waitForSelector`）。  
- **面向 Web 的断言**：使用 `expect` 断言，其支持重试和等待条件满足，减少测试不稳定性。  
- **配置调试高亮**：在 `playwright.config.ts` 中配置调试时高亮 Playwright 执行的动作，便于分步观察。示例：  
  ```typescript  
  use: {  
    /* 重试失败测试时收集跟踪信息（详见 https://playwright.dev/docs/trace-viewer） */  
    trace: 'on-first-retry',  
    video: 'on',  
    screenshot: 'only-on-failure',  
  }  
  ```  


### **十、补充说明**  
- 定期审查和更新测试套件，确保与应用变更同步。  
- 为测试添加文档，提升可读性和可维护性。  
- 使用统一的测试命名规范。