---
description: 
globs: 
alwaysApply: true
---
---
description:cursor行为指导
globs: 
alwaysApply:true
---
1. **“修改后验证流程”：每次修改后，输出该修改方案的流程图代码，可以输入mermaid
2. **“windows系统编码”：现在是在windows环境下开发，不要使用linux命令，不要使用windows不兼容的命令及命令参数(例如mkdir，没有-p参数)。
3. **“使用中文”：Always respond in 中文
4. **“使用‘cursor_project_rules’作为知识库”：始终参考“cursor_project_rules”，以了解项目的上下文。不要编写超出“cursor_project_rules”文件夹提供上下文的任何代码。该文件夹作为知识库，包含必须失踪遵循的基本规则和指南。如果有不清楚的地方，在继续编码之前先检查此文件夹。
5. **“验证信息”：在呈现信息之前，始终验证上下文中的信息。不要在没有明确证据的情况下做出假设和推测
6. **“遵循‘implementation-plan.mdc’进行功能开发”：在实现新功能时，严格遵循“implementation-plan.mdc”中列出的步骤，每个步骤按顺序排列，必须按顺序完成。完成每个步骤后，更新“implementation-plan.mdc”，添加“Done”字样以及两行的步骤总结，注意是添加，不要修改原始文档任何内容。这确保了清晰的工作日志，有助于保持透明度和跟踪进度。implementation-plan.mdc这个文件位于 .cursor/rules/ 目录下，不要搞错了
7. **“逐文件更改”：逐文件进行所有更改，并给用户机会发现错误
8. **“不道歉”：不要使用道歉
9. **“不提供理解反馈”：避免在评论或文档中提供关于理解的反馈
10. **“不建议空白更改”：不要建议更改空白
11. **“不提供摘要”：不要提供不必要的更改摘要。只有在用户明确要求简要概述后，才进行总结。
12. **“不发明”：不要发明除明确请求之外的更改。
13. **“保留现有代码”：不要删除不相关的代码或功能。注意保留现有结构。
14. **“单块编辑”：将所有编辑提供为单块，而不是为统一文件提供多步指令或解释。
15. **“不检查实现”：不要要求用户验证提供的上下文中可见的实现。但是，如果更改影响功能，提供自动化检查或测试，而不是要求手动验证。
16. **“不进行不必要的更新”：当没有实际修改需求时，不要建议更新或更改文件。
17. **“提供真实文件链接”：始终提供真实文件的链接，而不是上下文生成的文件。
18. **“不讨论当前实现”：除非用户要求或需要解释请求更改的影响，否则不要讨论当前实现。
19. **“检查上下文生成的文件内容：记住检查上下文生成的文件，以获取当前文件内容和实现。
20. **“使用明确的变量名”：优先使用描述性、明确的变量名，而不是短而模糊的变量名，以增强代码可读性。
21. **“遵循一致的编码风格”：遵循项目中现有的编码风格以保持一致性。
22. **“优先考虑性能”：在建议更改时，优先考虑代码性能（如果适用）。
23. **“安全第一”：在修改或建议代码更改时，始终考虑安全影响。
24. **“测试覆盖”： 为新的或修改的代码建议，包括适当的单元测试。
25. **“错误处理”：在必要时，实现简装的错误处理和日志记录。
26. **“模块化设计”： 鼓励模块化设计原则，以提高代码的可维护性和可重用性。
27. **“版本兼容性”： 在建议更改时，确保它们与项目的特定语言或框架版本兼容。如果出现版本冲突，建议替代方案。
28. **“避免魔术数字”：将硬编码的替换为命名常量，以提高代码清晰度和可维护性。
29. **“考虑边缘情况”：在实现逻辑时，始终考虑并处理可能的边缘情况。
30. **“使用断言”：在可能的情况下包含断言，已验证假设并尽早捕获潜在错误。
31. **“目录检查”：建目录时，请仔细检查当前位置，避免重复建立以及建错位置
32. **“数据库管理工具统一存放”：数据库管理维护工具，统一放在backend/scripts/db下，不要总是建新的文件去管理数据库
33. **“确认功能的修改”：对在implementation-plan.mdc已经确认完成的功能，如需修改，需要提出足够的理由，并将涉及的修改任务列出在该功能下方（添加，不要修改文档任何内容），提供确认完成的选项。
34. **“不要动mdc设置”：修改任何.mdc文件时，不要修改头部设置部分。
35. **“核对及自动测试”：没完成一个前后端的整体流程，请主动核对前后端api接口、数据等是否对应。如涉及到数据库的数据，主动检查数据库中的表结构、数据是否正确。最好自动测试所有功能。直到没有错误发生
36. **“记录”：每次创建或修改文件，都记录下来，生成对应功能的记录文档
37. **“始终确认”：始终注意： 1. 确认正确的文件路径  2. 检查文件是否在正确的位置 3.验证更改是否生效

